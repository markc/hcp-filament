name: Code Quality

on:
  pull_request:
    branches: [ main ]

jobs:
  pint:
    runs-on: ubuntu-latest
    name: Laravel Pint (Code Style)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: Check code style with Laravel Pint
      run: vendor/bin/pint --test

  phpstan:
    runs-on: ubuntu-latest
    name: PHPStan (Static Analysis)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Install PHPStan
      run: composer require --dev phpstan/phpstan larastan/larastan --no-interaction

    - name: Create PHPStan config
      run: |
        cat > phpstan.neon << 'EOF'
        includes:
            - vendor/larastan/larastan/extension.neon

        parameters:
            paths:
                - app/
            level: 6
            ignoreErrors:
                - '#Unsafe usage of new static#'
            checkMissingIterableValueType: false
        EOF

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Generate application key
      run: php artisan key:generate --ansi

    - name: Run PHPStan analysis
      run: vendor/bin/phpstan analyse --memory-limit=2G

  security:
    runs-on: ubuntu-latest
    name: Security Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Security audit
      run: composer audit

    - name: Check for known security vulnerabilities
      run: |
        # Install security checker
        curl -H "Cache-Control: no-cache" -sS https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64 -o local-php-security-checker
        chmod +x ./local-php-security-checker
        ./local-php-security-checker --format=json