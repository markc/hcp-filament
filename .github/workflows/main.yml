name: Main CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: none

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file and generate key
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        php artisan key:generate --ansi --force

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Check code style with Laravel Pint
      run: vendor/bin/pint --test

    - name: Validate Composer configuration
      run: composer validate --strict

    - name: Check for security vulnerabilities
      run: composer audit

  # Syntax and Basic Checks
  syntax-check:
    runs-on: ubuntu-latest
    name: Syntax & Basic Validation
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Check PHP syntax
      run: |
        echo "Checking PHP syntax..."
        find app/ -name "*.php" -exec php -l {} \; | grep -v "No syntax errors" || echo "✅ No syntax errors found"
        find database/ -name "*.php" -exec php -l {} \; | grep -v "No syntax errors" || echo "✅ No syntax errors found"
        find tests/ -name "*.php" -exec php -l {} \; | grep -v "No syntax errors" || echo "✅ No syntax errors found"

    - name: Test application bootstrap
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        touch database/database.sqlite
        php artisan key:generate --ansi --force
        php artisan config:clear
        php artisan route:list | head -5

  # Tests
  tests:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: code-quality

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, fileinfo
        coverage: xdebug

    - name: Setup problem matchers
      run: |
        echo "::add-matcher::${{ runner.tool_cache }}/php.json"
        echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ runner.os }}-8.4-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-${{ runner.os }}-8.4-

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file and generate key
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=:memory:" >> .env
        php artisan key:generate --ansi --force

    - name: Create SQLite database file
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force --seed

    - name: Clear application cache
      run: |
        php artisan config:clear
        php artisan cache:clear
        php artisan view:clear

    - name: Run Pest tests
      run: vendor/bin/pest --coverage --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage --stop-on-failure

    - name: Upload coverage to Codecov
      if: matrix.php == '8.4' && matrix.laravel == '12.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results to GitHub
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-php84-laravel12
        path: |
          tests/
          storage/logs/
        retention-days: 3

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  # Feature Tests
  feature-tests:
    runs-on: ubuntu-latest
    name: Feature & Integration Tests
    needs: tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file and generate key
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        php artisan key:generate --ansi --force

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Seed database
      run: php artisan db:seed --force

    - name: Optimize Filament
      run: php artisan filament:optimize

    - name: Test Filament panel access
      run: |
        echo "Testing Filament panel routes..."
        php artisan route:list | grep filament || echo "No Filament routes found"
        
    - name: Test model factories
      run: |
        echo "Testing model factories..."
        php artisan tinker --execute="
        try {
            \App\Models\User::factory()->create(['role' => 'admin', 'active' => true]);
            \App\Models\Vhost::factory()->create();
            \App\Models\Vmail::factory()->create();
            \App\Models\Valias::factory()->create();
            echo 'All factories working correctly';
        } catch (Exception \$e) {
            echo 'Factory error: ' . \$e->getMessage();
            exit(1);
        }
        "

  # Build Assets
  build:
    runs-on: ubuntu-latest
    name: Build & Deploy Assets
    needs: [code-quality, syntax-check, tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install NPM dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Cache composer dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ hashFiles('composer.lock') }}

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file and generate key
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        php artisan key:generate --ansi --force

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Optimize Filament
      run: php artisan filament:optimize

    - name: Cache Laravel configuration
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

    - name: Verify build
      run: |
        echo "✅ Build completed successfully"
        php artisan --version
        php artisan route:list | head -5

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          public/build/
          storage/framework/cache/
        retention-days: 1

