name: Tests

on:
  push:
    branches: [ main ]

jobs:
  pest:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php: [8.4]
        laravel: [12.*]
        stability: [prefer-stable]
        include:
          - laravel: 12.*
            testbench: 10.*

    name: PHP ${{ matrix.php }} - Laravel ${{ matrix.laravel }} (${{ matrix.stability }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, fileinfo
        coverage: xdebug

    - name: Setup problem matchers
      run: |
        echo "::add-matcher::${{ runner.tool_cache }}/php.json"
        echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: composer-${{ runner.os }}-${{ matrix.php }}-${{ hashFiles('composer.lock') }}
        restore-keys: |
          composer-${{ runner.os }}-${{ matrix.php }}-

    - name: Install Composer dependencies
      run: |
        composer require "laravel/framework:${{ matrix.laravel }}" "orchestra/testbench:${{ matrix.testbench }}" --no-interaction --no-update
        composer update --${{ matrix.stability }} --prefer-dist --no-interaction

    - name: Create environment file
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=:memory:" >> .env
        ls -la .env
        cat .env

    - name: Generate application key
      run: php artisan key:generate --ansi

    - name: Create SQLite database file
      run: touch database/database.sqlite

    - name: Run database migrations
      run: php artisan migrate --force --seed

    - name: Clear application cache
      run: |
        php artisan config:clear
        php artisan cache:clear
        php artisan view:clear

    - name: Run Pest tests
      run: vendor/bin/pest --coverage --coverage-text --coverage-clover=coverage.xml --coverage-html=coverage --stop-on-failure

    - name: Upload coverage to Codecov
      if: matrix.php == '8.4' && matrix.laravel == '12.*'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results to GitHub
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-results-${{ matrix.php }}-${{ matrix.laravel }}
        path: |
          tests/
          storage/logs/
        retention-days: 3

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      if: matrix.php == '8.4' && matrix.laravel == '12.*'
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7

  feature-tests:
    runs-on: ubuntu-latest
    name: Feature Tests
    needs: pest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

    - name: Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=sqlite" >> .env
        echo "DB_DATABASE=database/database.sqlite" >> .env
        ls -la .env
        cat .env

    - name: Create SQLite database
      run: touch database/database.sqlite

    - name: Generate application key
      run: php artisan key:generate --ansi

    - name: Run database migrations
      run: php artisan migrate --force

    - name: Seed database
      run: php artisan db:seed --force

    - name: Optimize Filament
      run: php artisan filament:optimize

    - name: Test Filament panel access
      run: |
        echo "Testing Filament panel routes..."
        php artisan route:list | grep filament || echo "No Filament routes found"
        
    - name: Test model factories
      run: |
        echo "Testing model factories..."
        php artisan tinker --execute="
        try {
            \App\Models\User::factory()->create(['role' => 'admin', 'active' => true]);
            \App\Models\Vhost::factory()->create();
            \App\Models\Vmail::factory()->create();
            \App\Models\Valias::factory()->create();
            echo 'All factories working correctly';
        } catch (Exception \$e) {
            echo 'Factory error: ' . \$e->getMessage();
            exit(1);
        }
        "